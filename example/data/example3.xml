<?xml version="1.0" encoding="UTF-8"?>
<testsuites>
  <testsuite name="test-filter" errors="0" failures="0" tests="631" hostname="tbd" time="0.007" timestamp="2023-06-08T12:15:14Z">
    <properties>
      <property name="random-seed" value="2576173223"/>
    </properties>
    <testcase classname="test-filter.global" name="Scenario: Brickwall lowpass filters can be initialized/Given: The filter parameters for a 10th order brickwall lowpass filter with 100 Hz sampling rate and 25Hz cutoff/When: The filter is created" time="0.000" status="run"/>
    <testcase classname="test-filter.global" name="Scenario: Brickwall lowpass filters can be initialized/Given: The filter parameters for a 10th order brickwall lowpass filter with 100 Hz sampling rate and 25Hz cutoff/When: The filter is created/Then: The status is ok" time="0.000" status="run"/>
    <testcase classname="test-filter.global" name="Scenario: Brickwall lowpass filters can be initialized/Given: The filter parameters for a 10th order brickwall lowpass filter with 100 Hz sampling rate and 25Hz cutoff/When: The filter is created/Then: The coefficients are correct" time="0.000" status="run"/>
    <testcase classname="test-filter.global" name="Scenario: Brickwall highpass filters can be initialized/Given: The filter parameters for a 10th order brickwall highpass filter with 100 Hz sampling rate and 25Hz cutoff/When: The filter is created" time="0.000" status="run"/>
    <testcase classname="test-filter.global" name="Scenario: Brickwall highpass filters can be initialized/Given: The filter parameters for a 10th order brickwall highpass filter with 100 Hz sampling rate and 25Hz cutoff/When: The filter is created/Then: The status is ok" time="0.000" status="run"/>
    <testcase classname="test-filter.global" name="Scenario: Brickwall highpass filters can be initialized/Given: The filter parameters for a 10th order brickwall highpass filter with 100 Hz sampling rate and 25Hz cutoff/When: The filter is created/Then: The coefficients are correct" time="0.000" status="run"/>
    <testcase classname="test-filter.global" name="Scenario: Brickwall bandstop filters can be initialized/Given: The filter parameters for a 10th order bandstop highpass filter with 100 Hz sampling rate and 20Hz-40Hz cutoff/When: The filter is created" time="0.000" status="run"/>
    <testcase classname="test-filter.global" name="Scenario: Brickwall bandstop filters can be initialized/Given: The filter parameters for a 10th order bandstop highpass filter with 100 Hz sampling rate and 20Hz-40Hz cutoff/When: The filter is created/Then: The status is ok" time="0.000" status="run"/>
    <testcase classname="test-filter.global" name="Scenario: Brickwall bandstop filters can be initialized/Given: The filter parameters for a 10th order bandstop highpass filter with 100 Hz sampling rate and 20Hz-40Hz cutoff/When: The filter is created/Then: The input array is zeroed" time="0.000" status="run"/>
    <testcase classname="test-filter.global" name="Scenario: Brickwall bandstop filters can be initialized/Given: The filter parameters for a 10th order bandstop highpass filter with 100 Hz sampling rate and 20Hz-40Hz cutoff/When: The filter is created/Then: The output array is zeroed" time="0.000" status="run"/>
    <testcase classname="test-filter.global" name="Scenario: Brickwall bandstop filters can be initialized/Given: The filter parameters for a 10th order bandstop highpass filter with 100 Hz sampling rate and 20Hz-40Hz cutoff/When: The filter is created/Then: The coefficients are correct" time="0.000" status="run"/>
    <testcase classname="test-filter.global" name="Scenario: Brickwall bandpass filters can be initialized/Given: The filter parameters for a 10th order brickwall bandpass filter with 100 Hz sampling rate and 20Hz-40Hz cutoff/When: The filter is created" time="0.000" status="run"/>
    <testcase classname="test-filter.global" name="Scenario: Brickwall bandpass filters can be initialized/Given: The filter parameters for a 10th order brickwall bandpass filter with 100 Hz sampling rate and 20Hz-40Hz cutoff/When: The filter is created/Then: The status is ok" time="0.000" status="run"/>
    <testcase classname="test-filter.global" name="Scenario: Brickwall bandpass filters can be initialized/Given: The filter parameters for a 10th order brickwall bandpass filter with 100 Hz sampling rate and 20Hz-40Hz cutoff/When: The filter is created/Then: The input array is zeroed" time="0.000" status="run"/>
    <testcase classname="test-filter.global" name="Scenario: Brickwall bandpass filters can be initialized/Given: The filter parameters for a 10th order brickwall bandpass filter with 100 Hz sampling rate and 20Hz-40Hz cutoff/When: The filter is created/Then: The output array is zeroed" time="0.000" status="run"/>
    <testcase classname="test-filter.global" name="Scenario: Brickwall bandpass filters can be initialized/Given: The filter parameters for a 10th order brickwall bandpass filter with 100 Hz sampling rate and 20Hz-40Hz cutoff/When: The filter is created/Then: The coefficients are correct" time="0.000" status="run"/>
    <testcase classname="test-filter.global" name="Scenario: Butterworth output coefficients can be computed/Given: parameters: fifth order butterworth, 100 Hz sampling rate, 20Hz cutoff/When: the lowpass parameters are computed" time="0.000" status="run"/>
    <testcase classname="test-filter.global" name="Scenario: Butterworth output coefficients can be computed/Given: parameters: fifth order butterworth, 100 Hz sampling rate, 20Hz cutoff/When: the lowpass parameters are computed/Then: status is ok" time="0.000" status="run"/>
    <testcase classname="test-filter.global" name="Scenario: Butterworth output coefficients can be computed/Given: parameters: fifth order butterworth, 100 Hz sampling rate, 20Hz cutoff/When: the lowpass parameters are computed/Then: results are correct" time="0.000" status="run"/>
    <testcase classname="test-filter.global" name="Scenario: Butterworth lowpass filters can be initialized/Given: parameters: fifth order butterworth, 100 Hz sampling rate, 25Hz cutoff/When: lowpass parameters are computed" time="0.000" status="run"/>
    <testcase classname="test-filter.global" name="Scenario: Butterworth lowpass filters can be initialized/Given: parameters: fifth order butterworth, 100 Hz sampling rate, 25Hz cutoff/When: lowpass parameters are computed/Then: status is ok" time="0.000" status="run"/>
    <testcase classname="test-filter.global" name="Scenario: Butterworth lowpass filters can be initialized/Given: parameters: fifth order butterworth, 100 Hz sampling rate, 25Hz cutoff/When: lowpass parameters are computed/Then: coefficients are correct" time="0.000" status="run"/>
    <testcase classname="test-filter.global" name="Scenario: Butterworth highpass filters can be initialized/Given: parameters: fifth order butterworth, 100 Hz sampling rate, 25Hz cutoff/When: highpass parameters are computed" time="0.000" status="run"/>
    <testcase classname="test-filter.global" name="Scenario: Butterworth highpass filters can be initialized/Given: parameters: fifth order butterworth, 100 Hz sampling rate, 25Hz cutoff/When: highpass parameters are computed/Then: status is ok" time="0.000" status="run"/>
    <testcase classname="test-filter.global" name="Scenario: Butterworth highpass filters can be initialized/Given: parameters: fifth order butterworth, 100 Hz sampling rate, 25Hz cutoff/When: highpass parameters are computed/Then: coefficients are correct" time="0.000" status="run"/>
    <testcase classname="test-filter.global" name="Scenario: Butterworth bandstop filters can be initialized/Given: parameters: third order butterworth, 100 Hz sampling rate, 15-30Hz bandstop/When: bandstop parameters are computed" time="0.000" status="run"/>
    <testcase classname="test-filter.global" name="Scenario: Butterworth bandstop filters can be initialized/Given: parameters: third order butterworth, 100 Hz sampling rate, 15-30Hz bandstop/When: bandstop parameters are computed/Then: status is ok" time="0.000" status="run"/>
    <testcase classname="test-filter.global" name="Scenario: Butterworth bandstop filters can be initialized/Given: parameters: third order butterworth, 100 Hz sampling rate, 15-30Hz bandstop/When: bandstop parameters are computed/Then: coefficients are correct" time="0.000" status="run"/>
    <testcase classname="test-filter.global" name="Scenario: Butterworth bandpass filters can be initialized/Given: parameters: third order butterworth, 100 Hz sampling rate, 15-30Hz bandpass/When: bandpass parameters are computed" time="0.000" status="run"/>
    <testcase classname="test-filter.global" name="Scenario: Butterworth bandpass filters can be initialized/Given: parameters: third order butterworth, 100 Hz sampling rate, 15-30Hz bandpass/When: bandpass parameters are computed/Then: status is ok" time="0.000" status="run"/>
    <testcase classname="test-filter.global" name="Scenario: Butterworth bandpass filters can be initialized/Given: parameters: third order butterworth, 100 Hz sampling rate, 15-30Hz bandpass/When: bandpass parameters are computed/Then: results are correct" time="0.000" status="run"/>
    <testcase classname="test-filter.global" name="Scenario: Chebyshev output coefficients can be computed/Given: parameters: fourth order chebyshev, 100 Hz sampling rate, 25Hz cutoff, 3 db ripple, lowpass/When: denominator is computed/Then: the status is ok" time="0.000" status="run"/>
    <testcase classname="test-filter.global" name="Scenario: Chebyshev output coefficients can be computed/Given: parameters: fourth order chebyshev, 100 Hz sampling rate, 25Hz cutoff, 3 db ripple, lowpass/When: denominator is computed/Then: results are correct" time="0.000" status="run"/>
    <testcase classname="test-filter.global" name="Scenario: Chebyshev output coefficients can be computed/Given: parameters: fifth order chebyshev, 100 Hz sampling rate, 20Hz cutoff, 2 db ripple, high pass/When: coefficients are computed/Then: the status is ok" time="0.000" status="run"/>
    <testcase classname="test-filter.global" name="Scenario: Chebyshev output coefficients can be computed/Given: parameters: fifth order chebyshev, 100 Hz sampling rate, 20Hz cutoff, 2 db ripple, high pass/When: coefficients are computed/Then: results are correct" time="0.000" status="run"/>
    <testcase classname="test-filter.global" name="Scenario: Chebyshev output coefficients can be computed/Given: parameters: third order chebyshev, 100 Hz sampling rate, 15, 30Hz cutoff, 3 db ripple, band pass/When: coefficients are computed/Then: the status is ok" time="0.000" status="run"/>
    <testcase classname="test-filter.global" name="Scenario: Chebyshev output coefficients can be computed/Given: parameters: third order chebyshev, 100 Hz sampling rate, 15, 30Hz cutoff, 3 db ripple, band pass/When: coefficients are computed/Then: denomiator is correct" time="0.000" status="run"/>
    <testcase classname="test-filter.global" name="Scenario: Chebyshev output coefficients can be computed/Given: parameters: third order chebyshev, 100 Hz sampling rate, 15, 30Hz cutoff, 3 db ripple, band pass/When: coefficients are computed/Then: numerator is correct" time="0.000" status="run"/>
    <testcase classname="test-filter.global" name="Scenario: Chebyshev output coefficients can be computed/Given: parameters: third order chebyshev, 100 Hz sampling rate, 15, 30Hz cutoff, 3 db ripple, band stop/When: coefficients are computed/Then: the status is ok" time="0.000" status="run"/>
    <testcase classname="test-filter.global" name="Scenario: Chebyshev output coefficients can be computed/Given: parameters: third order chebyshev, 100 Hz sampling rate, 15, 30Hz cutoff, 3 db ripple, band stop/When: coefficients are computed/Then: denomiator is correct" time="0.000" status="run"/>
    <testcase classname="test-filter.global" name="Scenario: Chebyshev output coefficients can be computed/Given: parameters: third order chebyshev, 100 Hz sampling rate, 15, 30Hz cutoff, 3 db ripple, band stop/When: coefficients are computed/Then: numerator is correct" time="0.000" status="run"/>
    <testcase classname="test-filter.global" name="Scenario: Chebyshev low pass filters are correctly initialized/Given: parameters: fourth order chebyshev, 100 Hz sampling rate, 25Hz cutoff, 3 db ripple, lowpass/When: filter is created" time="0.000" status="run"/>
    <testcase classname="test-filter.global" name="Scenario: Chebyshev low pass filters are correctly initialized/Given: parameters: fourth order chebyshev, 100 Hz sampling rate, 25Hz cutoff, 3 db ripple, lowpass/When: filter is created/Then: the status is ok" time="0.000" status="run"/>
    <testcase classname="test-filter.global" name="Scenario: Chebyshev low pass filters are correctly initialized/Given: parameters: fourth order chebyshev, 100 Hz sampling rate, 25Hz cutoff, 3 db ripple, lowpass/When: filter is created/Then: buffers are initialized" time="0.000" status="run"/>
    <testcase classname="test-filter.global" name="Scenario: Chebyshev low pass filters are correctly initialized/Given: parameters: fourth order chebyshev, 100 Hz sampling rate, 25Hz cutoff, 3 db ripple, lowpass/When: filter is created/Then: feedback coefficients are correct" time="0.000" status="run"/>
    <testcase classname="test-filter.global" name="Scenario: Chebyshev low pass filters are correctly initialized/Given: parameters: fourth order chebyshev, 100 Hz sampling rate, 25Hz cutoff, 3 db ripple, lowpass/When: filter is created/Then: feedforward coefficients are correct" time="0.000" status="run"/>
    <testcase classname="test-filter.global" name="Scenario: Chebyshev high pass filters are correctly initialized/Given: parameters: fifth order chebyshev, 100 Hz sampling rate, 20Hz cutoff, 2 db ripple, high pass/When: coefficients are computed" time="0.000" status="run"/>
    <testcase classname="test-filter.global" name="Scenario: Chebyshev high pass filters are correctly initialized/Given: parameters: fifth order chebyshev, 100 Hz sampling rate, 20Hz cutoff, 2 db ripple, high pass/When: coefficients are computed/Then: the status is ok" time="0.000" status="run"/>
    <testcase classname="test-filter.global" name="Scenario: Chebyshev high pass filters are correctly initialized/Given: parameters: fifth order chebyshev, 100 Hz sampling rate, 20Hz cutoff, 2 db ripple, high pass/When: coefficients are computed/Then: buffers are initialized" time="0.000" status="run"/>
    <testcase classname="test-filter.global" name="Scenario: Chebyshev high pass filters are correctly initialized/Given: parameters: fifth order chebyshev, 100 Hz sampling rate, 20Hz cutoff, 2 db ripple, high pass/When: coefficients are computed/Then: feedback coefficients are correct" time="0.000" status="run"/>
    <testcase classname="test-filter.global" name="Scenario: Chebyshev high pass filters are correctly initialized/Given: parameters: fifth order chebyshev, 100 Hz sampling rate, 20Hz cutoff, 2 db ripple, high pass/When: coefficients are computed/Then: feedforward coefficients are correct" time="0.000" status="run"/>
    <testcase classname="test-filter.global" name="Scenario: Chebyshev band pass filters are correctly initialized/Given: parameters: third order chebyshev, 100 Hz sampling rate, 15, 30Hz cutoff, 3 db ripple, band pass/When: coefficients are computed" time="0.000" status="run"/>
    <testcase classname="test-filter.global" name="Scenario: Chebyshev band pass filters are correctly initialized/Given: parameters: third order chebyshev, 100 Hz sampling rate, 15, 30Hz cutoff, 3 db ripple, band pass/When: coefficients are computed/Then: results are correct" time="0.000" status="run"/>
    <testcase classname="test-filter.global" name="Scenario: Chebyshev band stop filters are correctly initialized/Given: parameters: third order chebyshev, 100 Hz sampling rate, 15, 30Hz cutoff, 3 db ripple, band stop/When: coefficients are computed" time="0.000" status="run"/>
    <testcase classname="test-filter.global" name="Scenario: Chebyshev band stop filters are correctly initialized/Given: parameters: third order chebyshev, 100 Hz sampling rate, 15, 30Hz cutoff, 3 db ripple, band stop/When: coefficients are computed/Then: results are correct" time="0.000" status="run"/>
    <testcase classname="test-filter.global" name="Scenario: Chebyshev type 2 design/Given: I need to compute coefficients for a second order chebyshev type2 lowpass at 15 Hz/100Hz with -0.3dB ripple/When: the values are computed/Then: the status is ok" time="0.000" status="run"/>
    <testcase classname="test-filter.global" name="Scenario: Chebyshev type 2 design/Given: I need to compute coefficients for a second order chebyshev type2 lowpass at 15 Hz/100Hz with -0.3dB ripple/When: the values are computed/Then: the feedforward coefficients are correct" time="0.000" status="run"/>
    <testcase classname="test-filter.global" name="Scenario: Chebyshev type 2 design/Given: I need to compute coefficients for a second order chebyshev type2 lowpass at 15 Hz/100Hz with -0.3dB ripple/When: the values are computed/Then: the feedback coefficients are correct" time="0.000" status="run"/>
    <testcase classname="test-filter.global" name="Scenario: Chebyshev type 2 design/Given: I need to compute coefficients for a second order chebyshev type2 highpass at 15 Hz/100Hz with -0.3dB ripple/When: the values are computed/Then: the status is ok" time="0.000" status="run"/>
    <testcase classname="test-filter.global" name="Scenario: Chebyshev type 2 design/Given: I need to compute coefficients for a second order chebyshev type2 highpass at 15 Hz/100Hz with -0.3dB ripple/When: the values are computed/Then: the feedforward coefficients are correct" time="0.000" status="run"/>
    <testcase classname="test-filter.global" name="Scenario: Chebyshev type 2 design/Given: I need to compute coefficients for a second order chebyshev type2 highpass at 15 Hz/100Hz with -0.3dB ripple/When: the values are computed/Then: the feedback coefficients are correct" time="0.000" status="run"/>
    <testcase classname="test-filter.global" name="Scenario: Chebyshev type 2 design/Given: I need to compute a second order bandpass at [30Hz,60Hz] for 200Hz sampling rate with 3db ripple/When: i compute the polynomial/Then: the status is ok" time="0.000" status="run"/>
    <testcase classname="test-filter.global" name="Scenario: Chebyshev type 2 design/Given: I need to compute a second order bandpass at [30Hz,60Hz] for 200Hz sampling rate with 3db ripple/When: i compute the polynomial/Then: the feedforward coefficients are correct" time="0.000" status="run"/>
    <testcase classname="test-filter.global" name="Scenario: Chebyshev type 2 design/Given: I need to compute a second order bandpass at [30Hz,60Hz] for 200Hz sampling rate with 3db ripple/When: i compute the polynomial/Then: the feedback coefficients are correct" time="0.000" status="run"/>
    <testcase classname="test-filter.global" name="Scenario: Chebyshev type 2 design/Given: I need to compute a second order bandstop at [30Hz,60Hz] for 200Hz sampling rate with 3db ripple/When: i compute the polynomial/Then: the status is ok" time="0.000" status="run"/>
    <testcase classname="test-filter.global" name="Scenario: Chebyshev type 2 design/Given: I need to compute a second order bandstop at [30Hz,60Hz] for 200Hz sampling rate with 3db ripple/When: i compute the polynomial/Then: the feedforward coefficients are correct" time="0.000" status="run"/>
    <testcase classname="test-filter.global" name="Scenario: Chebyshev type 2 design/Given: I need to compute a second order bandstop at [30Hz,60Hz] for 200Hz sampling rate with 3db ripple/When: i compute the polynomial/Then: the feedback coefficients are correct" time="0.000" status="run"/>
    <testcase classname="test-filter.global" name="Scenario: A moving average filter can be created/Given: An options structure filled with values for moving average filters/When: the create function is called" time="0.000" status="run"/>
    <testcase classname="test-filter.global" name="Scenario: A moving average filter can be created/Given: An options structure filled with values for moving average filters/When: the create function is called/Then: the buffers are initialized" time="0.000" status="run"/>
    <testcase classname="test-filter.global" name="Scenario: A moving average filter can be created/Given: An options structure filled with values for moving average filters/When: the create function is called/Then: The filter can be initialized" time="0.000" status="run"/>
    <testcase classname="test-filter.global" name="Scenario: A moving average filter can be created/Given: An options structure filled with values for moving average filters/When: the create function is called/Then: a step function can be filtered" time="0.000" status="run"/>
    <testcase classname="test-filter.global" name="Scenario: A moving average filter can be used/Given: A moving average filter struct is manually created/When: a step function is filtered/Then: the filter first returns zero" time="0.000" status="run"/>
    <testcase classname="test-filter.global" name="Scenario: A moving average filter can be used/Given: A moving average filter struct is manually created/When: a step function is filtered/Then: the filter function is called with a step function the output has a linear response" time="0.000" status="run"/>
    <testcase classname="test-filter.global" name="Scenario: A moving average filter can be used/Given: A moving average filter struct is manually created/When: a step function is filtered/Then: the filter function is called with a step function the output has a linear response" time="0.000" status="run"/>
    <testcase classname="test-filter.global" name="Scenario: A moving average filter can be used/Given: A moving average filter struct is manually created/When: a step function is filtered/Then: the filter function is called with a step function the output has a linear response" time="0.000" status="run"/>
    <testcase classname="test-filter.global" name="Scenario: A moving average filter can be used/Given: A moving average filter struct is manually created/When: a step function is filtered/Then: the filter function is called with a step function the output has a linear response" time="0.000" status="run"/>
    <testcase classname="test-filter.global" name="Scenario: A moving average filter can be used/Given: A moving average filter struct is manually created/When: a step function is filtered/Then: the filter function reaches a constant state after 4 calls" time="0.000" status="run"/>
    <testcase classname="test-filter.global" name="Scenario: A moving average filter can be used/Given: A moving average filter struct is manually created/When: a step function is filtered/When: The gain is set to 4.0/Then: the first value in the output coefficients is set to 4.0" time="0.000" status="run"/>
    <testcase classname="test-filter.global" name="Scenario: A moving average filter can be used/Given: A moving average filter struct is manually created/When: a step function is filtered/When: The gain is set to 4.0/When: a filter cycle is run in the steady state/Then: the filter outputs 4 times the input" time="0.000" status="run"/>
    <testcase classname="test-filter.global" name="Scenario: A moving average highpass filter can be used/Given: An options structure filled with values for moving average filters/When: the create function is called" time="0.000" status="run"/>
    <testcase classname="test-filter.global" name="Scenario: A moving average highpass filter can be used/Given: An options structure filled with values for moving average filters/When: the create function is called/Then: the buffers are initialized" time="0.000" status="run"/>
    <testcase classname="test-filter.global" name="Scenario: A moving average highpass filter can be used/Given: An options structure filled with values for moving average filters/When: the create function is called/Then: The filter can be initialized" time="0.000" status="run"/>
    <testcase classname="test-filter.global" name="Scenario: A moving average highpass filter can be used/Given: An options structure filled with values for moving average filters/When: the create function is called/Then: the output slowly drops to zero" time="0.000" status="run"/>
    <testcase classname="test-filter.global" name="Scenario: A moving average highpass filter can be used/Given: An options structure filled with values for moving average filters/When: the create function is called/Then: the output reaches zero" time="0.000" status="run"/>
    <testcase classname="test-filter.global" name="Scenario: An buttwerworth lowpass filter generated on the webpage can be used/Given: Generated code/When: A zero is filtered/Then: Output is 0" time="0.000" status="run"/>
    <testcase classname="test-filter.global" name="Scenario: An buttwerworth lowpass filter generated on the webpage can be used/Given: Generated code/When: A step function is filtered/Then: Output is larger than 0" time="0.000" status="run"/>
    <testcase classname="test-filter.global" name="Scenario: An buttwerworth lowpass filter generated on the webpage can be used/Given: Generated code/When: A step function is filtered/Then: Output is larger than before" time="0.000" status="run"/>
    <testcase classname="test-filter.global" name="Scenario: The coefficients are used in correct order/Given: A filter struct is manually created with different input parameters/When: an impulse input is filtered/Then: the filter first returns coefficient 0 times inmpulse" time="0.000" status="run"/>
    <testcase classname="test-filter.global" name="Scenario: The coefficients are used in correct order/Given: A filter struct is manually created with different input parameters/When: an impulse input is filtered/Then: the filter first returns coefficient 1 times last input" time="0.000" status="run"/>
    <testcase classname="test-filter.global" name="Scenario: The coefficients are used in correct order/Given: A filter struct is manually created with different input parameters/When: an impulse input is filtered/Then: the filter first returns coefficient 2 times first input" time="0.000" status="run"/>
    <testcase classname="test-filter.global" name="Scenario: The coefficients are used in correct order/Given: A filter struct is manually created with different input parameters/When: an impulse input is filtered/Then: the filter first returns coefficient 3 times first input" time="0.000" status="run"/>
    <testcase classname="test-filter.global" name="Scenario: The coefficients are used in correct order/Given: A filter struct is manually created with different input parameters/When: an impulse input is filtered/Then: the filter first returns zero" time="0.000" status="run"/>
    <testcase classname="test-filter.global" name="Scenario: The coefficients are used in correct order/Given: A filter struct is manually created with different output parameters and the last output is set to 1/When: filter is called/Then: the filter returns -(output coefficient 1) times last output" time="0.000" status="run"/>
    <testcase classname="test-filter.global" name="Scenario: The coefficients are used in correct order/Given: A filter struct is manually created with different output parameters and the last output is set to 1/When: filter is called/Then: the filter return value computed from weigthed sum of last two outputs" time="0.000" status="run"/>
    <testcase classname="test-filter.global" name="Scenario: The coefficients are used in correct order/Given: A filter struct is manually created with different output parameters and the last output is set to 1/When: filter is called/Then: the filter return value computed from weigthed sum of last three outputs" time="0.000" status="run"/>
    <testcase classname="test-filter.global" name="Scenario: The coefficients are used in correct order/Given: A filter struct is manually created with different output parameters and the last output is set to 1/When: filter is called/Then: the filter return value computed from weigthed sum of last three outputs" time="0.000" status="run"/>
    <testcase classname="test-filter.global" name="Scenario: An FIR exponential lowpass filter can be used/Given: An options structure filled with values for FIR exponential lowpass filters/When: the create function is called" time="0.000" status="run"/>
    <testcase classname="test-filter.global" name="Scenario: An FIR exponential lowpass filter can be used/Given: An options structure filled with values for FIR exponential lowpass filters/When: the create function is called/Then: the buffers are initialized" time="0.000" status="run"/>
    <testcase classname="test-filter.global" name="Scenario: An FIR exponential lowpass filter can be used/Given: An options structure filled with values for FIR exponential lowpass filters/When: the create function is called/Then: The filter can be initialized" time="0.000" status="run"/>
    <testcase classname="test-filter.global" name="Scenario: An FIR exponential lowpass filter can be used/Given: An options structure filled with values for FIR exponential lowpass filters/When: the create function is called/Then: an impulse function can be filtered" time="0.000" status="run"/>
    <testcase classname="test-filter.global" name="Scenario: An FIR exponential lowpass filter can be used/Given: An options structure filled with values for FIR exponential lowpass filters/When: the create function is called/Then: an impulse function can be filtered" time="0.000" status="run"/>
    <testcase classname="test-filter.global" name="Scenario: An FIR exponential lowpass filter can be used/Given: An options structure filled with values for FIR exponential lowpass filters/When: the create function is called/Then: an impulse function can be filtered" time="0.000" status="run"/>
    <testcase classname="test-filter.global" name="Scenario: An FIR exponential lowpass filter can be used/Given: An options structure filled with values for FIR exponential lowpass filters/When: the create function is called/Then: an impulse function can be filtered" time="0.000" status="run"/>
    <testcase classname="test-filter.global" name="Scenario: An IIR exponential lowpass filter can be used/Given: An options structure filled with values for IIR exponential lowpass filters/When: the create function is called" time="0.000" status="run"/>
    <testcase classname="test-filter.global" name="Scenario: An IIR exponential lowpass filter can be used/Given: An options structure filled with values for IIR exponential lowpass filters/When: the create function is called/Then: the buffers are initialized" time="0.000" status="run"/>
    <testcase classname="test-filter.global" name="Scenario: An IIR exponential lowpass filter can be used/Given: An options structure filled with values for IIR exponential lowpass filters/When: the create function is called/Then: The filter can be initialized" time="0.000" status="run"/>
    <testcase classname="test-filter.global" name="Scenario: An IIR exponential lowpass filter can be used/Given: An options structure filled with values for IIR exponential lowpass filters/When: the create function is called/Then: a step function can be filtered" time="0.000" status="run"/>
    <testcase classname="test-filter.global" name="Scenario: An IIR exponential lowpass filter can be used/Given: An options structure filled with values for IIR exponential lowpass filters/When: the create function is called/Then: a step function can be filtered" time="0.000" status="run"/>
    <testcase classname="test-filter.global" name="Scenario: S-plane pole coefficients can be computed/Given: An array of size 3/When: the s-plane poles are computed/Then: results are correct" time="0.000" status="run"/>
    <testcase classname="test-filter.global" name="Scenario: S-plane pole coefficients can be computed/Given: An array of size 4/When: the s-plane poles are computed/Then: results are correct" time="0.000" status="run"/>
    <testcase classname="test-filter.global" name="Scenario: Convolution of parameters/Given: Two Arrays of size 3/When: the convolution is computed/Then: the result is correct" time="0.000" status="run"/>
    <testcase classname="test-filter.global" name="Scenario: The cpp bindings can be used/Given: An options structure filled with values for FIR exponential lowpass filters/When: the create function is called/Then: response can be computed" time="0.000" status="run"/>
    <testcase classname="test-filter.global" name="Scenario: The cpp bindings can be used/Given: An options structure filled with values for FIR moving average lowpass filters/When: the create function is called/Then: response can be computed" time="0.000" status="run"/>
    <testcase classname="test-filter.global" name="Scenario: The cpp bindings can be used/Given: An options structure filled with values for FIR moving average highpass filters/When: the create function is called/Then: response can be computed" time="0.000" status="run"/>
    <system-out/>
    <system-err/>
  </testsuite>
</testsuites>
